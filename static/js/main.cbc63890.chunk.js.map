{"version":3,"sources":["state/config/configSlice.ts","state/eq/eqSlice.ts","state/hooks.ts","components/EQList.tsx","components/EQMap.tsx","components/NavBar.tsx","App.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","state/store.ts","index.tsx"],"names":["DisplayMode","fetchEQData","createAsyncThunk","a","axios","get","response","data","filter","d","anm","maxi","eqSlice","createSlice","name","initialState","selectedId","earthquakeDatas","reducers","setSelectedId","state","action","payload","extraReducers","builder","addCase","fulfilled","actions","selectEQs","earthquake","selectSelectedMapUrl","useAppDispatch","useDispatch","useAppSelector","useSelector","useStyles","makeStyles","root","maxHeight","container","tabel","minWidth","EQList","classes","dispatch","datas","useState","selectedRowId","setSelectedRowId","Paper","elevation","className","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","i","hover","role","tabIndex","selected","eid","onClick","e","id","Date","at","toLocaleString","mag","theme","createStyles","display","padding","width","height","breakpoints","down","gridBreakPoint","frame","altText","margin","EQMap","mapUrl","url","frameBorder","Typography","gutterBottom","displayMode","LIGHT","configSlice","toggleDisplayMode","DARK","selectDisplayMode","config","title","flexGrow","link","color","blue","NavBar","open","setOpen","handleClose","AppBar","position","Toolbar","variant","IconButton","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","dividers","Link","href","target","DialogActions","Button","containerGrid","flexDirection","listItem","maxWidth","order","mapItem","flex","minHeight","App","useEffect","isDark","createMuiTheme","palette","type","primary","main","grey","sContainerBgColor","css","ThemeProvider","cx","sContainer","Grid","spacing","item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","combineReducers","configReducer","eqReducer","persistConfig","key","version","storage","whitelist","persistedReducer","persistReducer","store","configureStore","reducer","middleware","thunk","persister","persistStore","ReactDOM","render","StrictMode","loading","persistor","document","getElementById","URL","process","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.cbc63890.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport { RootState } from '../store';\r\n\r\nexport enum DisplayMode {\r\n\tLIGHT = 'light',\r\n\tDARK = 'dark'\r\n}\r\n\r\ntype StateType = {\r\n\tdisplayMode: DisplayMode;\r\n};\r\n\r\nconst initialState: StateType = {\r\n\tdisplayMode: DisplayMode.LIGHT\r\n};\r\n\r\nexport const configSlice = createSlice({\r\n\tname: 'config',\r\n\tinitialState,\r\n\treducers: {\r\n\t\ttoggleDisplayMode: state => {\r\n\t\t\tstate.displayMode =\r\n\t\t\t\tstate.displayMode === DisplayMode.LIGHT ? DisplayMode.DARK : DisplayMode.LIGHT;\r\n\t\t}\r\n\t}\r\n});\r\n\r\nexport const { toggleDisplayMode } = configSlice.actions;\r\nexport const selectDisplayMode = (state: RootState) => state.config.displayMode;\r\n\r\nexport default configSlice.reducer;\r\n","import axios from 'axios';\r\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../store';\r\nimport dataTemplateJson from './dataTemplate.json';\r\n\r\nconst apiUrl = 'https://www.jma.go.jp/bosai/quake/data/list.json';\r\nconst mapUrl =\r\n\t'https://www.jma.go.jp/bosai/map.html#elem=int&contents=earthquake_map&area_type=japan';\r\n\r\nexport type EQType = typeof dataTemplateJson;\r\n\r\ntype StateType = {\r\n\tselectedId: string;\r\n\tearthquakeDatas: EQType[];\r\n};\r\n\r\nconst initialState: StateType = {\r\n\tselectedId: '',\r\n\tearthquakeDatas: []\r\n};\r\n\r\nexport const fetchEQData = createAsyncThunk('eq/get', async () => {\r\n\tconst response = await axios.get<EQType[]>(apiUrl);\r\n\treturn response.data.filter(d => !!d.anm && !!d.maxi);\r\n});\r\n\r\nexport const eqSlice = createSlice({\r\n\tname: 'eq',\r\n\tinitialState,\r\n\treducers: {\r\n\t\tsetSelectedId: (state, action: PayloadAction<string>) => {\r\n\t\t\tstate.selectedId = action.payload;\r\n\t\t}\r\n\t},\r\n\textraReducers: builder => {\r\n\t\tbuilder.addCase(fetchEQData.fulfilled, (state, action) => {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tearthquakeDatas: action.payload\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n});\r\n\r\nexport const { setSelectedId } = eqSlice.actions;\r\n\r\nexport const selectEQs = (state: RootState) => state.earthquake.earthquakeDatas;\r\n\r\nexport const selectSelectedMapUrl = (state: RootState) =>\r\n\tstate.earthquake.selectedId ? `${mapUrl}&id=${state.earthquake.selectedId}` : '';\r\n\r\nexport default eqSlice.reducer;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useState } from 'react';\r\nimport {\r\n\tPaper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { selectEQs, setSelectedId } from '../state/eq/eqSlice';\r\nimport { useAppDispatch, useAppSelector } from '../state/hooks';\r\n\r\nconst useStyles = makeStyles({\r\n\troot: {\r\n\t\tmaxHeight: 'calc(100vh - 110px)'\r\n\t},\r\n\tcontainer: {\r\n\t\tmaxHeight: 'calc(100vh - 110px)'\r\n\t},\r\n\ttabel: {\r\n\t\tminWidth: '80px'\r\n\t}\r\n});\r\n\r\nexport const EQList: React.FC = () => {\r\n\tconst classes = useStyles();\r\n\tconst dispatch = useAppDispatch();\r\n\tconst datas = useAppSelector(selectEQs);\r\n\tconst [selectedRowId, setSelectedRowId] = useState('');\r\n\r\n\tconst onClickRow = (event: React.MouseEvent<HTMLTableRowElement>, id: string) => {\r\n\t\tdispatch(setSelectedId(id));\r\n\t\tsetSelectedRowId(id);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Paper elevation={3} className={classes.root}>\r\n\t\t\t<TableContainer className={classes.container}>\r\n\t\t\t\t<Table stickyHeader aria-label=\"sticky table\">\r\n\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t<TableCell className={classes.tabel} align=\"center\">\r\n\t\t\t\t\t\t\t\t震源\r\n\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t<TableCell className={classes.tabel} align=\"center\">\r\n\t\t\t\t\t\t\t\t発生時刻\r\n\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t<TableCell className={classes.tabel} align=\"center\">\r\n\t\t\t\t\t\t\t\t震度\r\n\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t<TableCell className={classes.tabel} align=\"center\">\r\n\t\t\t\t\t\t\t\tマグニチュード\r\n\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t{datas.map((data, i) => (\r\n\t\t\t\t\t\t\t<TableRow\r\n\t\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\t\thover\r\n\t\t\t\t\t\t\t\trole=\"checkbox\"\r\n\t\t\t\t\t\t\t\ttabIndex={-1}\r\n\t\t\t\t\t\t\t\tselected={selectedRowId === data.eid}\r\n\t\t\t\t\t\t\t\tonClick={e => onClickRow(e, data.eid)}>\r\n\t\t\t\t\t\t\t\t<TableCell align=\"center\">{data.anm}</TableCell>\r\n\t\t\t\t\t\t\t\t<TableCell align=\"center\">{new Date(data.at).toLocaleString()}</TableCell>\r\n\t\t\t\t\t\t\t\t<TableCell align=\"center\">{data.maxi}</TableCell>\r\n\t\t\t\t\t\t\t\t<TableCell align=\"center\">{data.mag}</TableCell>\r\n\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</TableBody>\r\n\t\t\t\t</Table>\r\n\t\t\t</TableContainer>\r\n\t\t</Paper>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport Iframe from 'react-iframe';\r\nimport { createStyles, makeStyles, Paper, Theme, Typography } from '@material-ui/core';\r\nimport { gridBreakPoint } from '../App';\r\nimport { selectSelectedMapUrl } from '../state/eq/eqSlice';\r\nimport { useAppSelector } from '../state/hooks';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\troot: {\r\n\t\t\tdisplay: 'flex',\r\n\t\t\tpadding: '5px',\r\n\t\t\twidth: '100%',\r\n\t\t\theight: 'calc(100vh - 115px)',\r\n\t\t\t[theme.breakpoints.down(gridBreakPoint)]: {\r\n\t\t\t\theight: '400px'\r\n\t\t\t}\r\n\t\t},\r\n\t\tframe: {\r\n\t\t\twidth: '100%'\r\n\t\t},\r\n\t\taltText: {\r\n\t\t\tmargin: 'auto'\r\n\t\t}\r\n\t})\r\n);\r\n\r\nexport const EQMap: React.FC = () => {\r\n\tconst classes = useStyles();\r\n\tconst mapUrl = useAppSelector(selectSelectedMapUrl);\r\n\t// console.log('mapUrl', mapUrl);\r\n\r\n\treturn (\r\n\t\t<Paper elevation={3} className={classes.root}>\r\n\t\t\t{!!mapUrl ? (\r\n\t\t\t\t<Iframe key={mapUrl} url={mapUrl} className={classes.frame} frameBorder={0} />\r\n\t\t\t) : (\r\n\t\t\t\t<Typography gutterBottom className={classes.altText}>\r\n\t\t\t\t\tリストを選択すると、Mapが表示されます。\r\n\t\t\t\t</Typography>\r\n\t\t\t)}\r\n\t\t</Paper>\r\n\t);\r\n};\r\n","import React, { useState } from 'react';\r\nimport {\r\n\tAppBar, Button, createStyles, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Link,\r\n\tmakeStyles, Theme, Toolbar, Typography\r\n} from '@material-ui/core';\r\nimport { blue } from '@material-ui/core/colors';\r\nimport Brightness4Icon from '@material-ui/icons/Brightness4';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport { toggleDisplayMode } from '../state/config/configSlice';\r\nimport { useAppDispatch } from '../state/hooks';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\ttitle: { flexGrow: 1 },\r\n\t\tlink: { color: blue['500'] }\r\n\t})\r\n);\r\n\r\nexport const NavBar: React.FC = () => {\r\n\tconst classes = useStyles();\r\n\tconst dispatch = useAppDispatch();\r\n\r\n\tconst onClickDisplayMode = () => {\r\n\t\tdispatch(toggleDisplayMode());\r\n\t};\r\n\r\n\tconst [open, setOpen] = useState(false);\r\n\r\n\tconst onClickInfomation = () => {\r\n\t\tsetOpen(true);\r\n\t};\r\n\tconst handleClose = () => {\r\n\t\tsetOpen(false);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<AppBar position=\"static\">\r\n\t\t\t<Toolbar>\r\n\t\t\t\t<Typography variant=\"h6\" className={classes.title}>\r\n\t\t\t\t\t地震情報｜Earthquake Infomation\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<IconButton onClick={onClickDisplayMode}>\r\n\t\t\t\t\t\t<Brightness4Icon />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t<IconButton onClick={onClickInfomation}>\r\n\t\t\t\t\t\t<InfoIcon />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t</div>\r\n\t\t\t</Toolbar>\r\n\t\t\t<Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n\t\t\t\t<DialogTitle id=\"customized-dialog-title\">ABOUT</DialogTitle>\r\n\t\t\t\t<DialogContent dividers>\r\n\t\t\t\t\t<Typography gutterBottom>\r\n\t\t\t\t\t\tこのサイトは、\r\n\t\t\t\t\t\t<Link\r\n\t\t\t\t\t\t\thref=\"https://www.jma.go.jp/jma/index.html\"\r\n\t\t\t\t\t\t\tclassName={classes.link}\r\n\t\t\t\t\t\t\ttarget=\"_blank\">\r\n\t\t\t\t\t\t\t気象庁\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\tから提供されている地震情報のAPIをもとに作られています。\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t<Typography gutterBottom>過去1ヵ月間の地震情報を表示しています。</Typography>\r\n\t\t\t\t</DialogContent>\r\n\t\t\t\t<DialogActions>\r\n\t\t\t\t\t<Button onClick={handleClose} color=\"secondary\">\r\n\t\t\t\t\t\tClose\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</DialogActions>\r\n\t\t\t</Dialog>\r\n\t\t</AppBar>\r\n\t);\r\n};\r\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { css, cx } from '@emotion/css';\nimport {\n\tcreateMuiTheme, createStyles, Grid, makeStyles, Theme, ThemeProvider\n} from '@material-ui/core';\nimport { blue, grey } from '@material-ui/core/colors';\nimport { EQList } from './components/EQList';\nimport { EQMap } from './components/EQMap';\nimport { NavBar } from './components/NavBar';\nimport { DisplayMode, selectDisplayMode } from './state/config/configSlice';\nimport { fetchEQData } from './state/eq/eqSlice';\n\nexport const gridBreakPoint = 'sm';\n\nconst useStyles = makeStyles((theme: Theme) =>\n\tcreateStyles({\n\t\tcontainerGrid: {\n\t\t\twidth: '100%',\n\t\t\tpadding: '15px',\n\t\t\tflexDirection: 'row',\n\t\t\t[theme.breakpoints.down(gridBreakPoint)]: {\n\t\t\t\tflexDirection: 'column'\n\t\t\t}\n\t\t},\n\t\tlistItem: {\n\t\t\tmaxWidth: '600px',\n\t\t\torder: 1,\n\t\t\t[theme.breakpoints.down(gridBreakPoint)]: {\n\t\t\t\torder: 2\n\t\t\t}\n\t\t},\n\t\tmapItem: {\n\t\t\tflex: 1,\n\t\t\torder: 2,\n\t\t\tminHeight: 'calc(100vh - 115px)',\n\t\t\t[theme.breakpoints.down(gridBreakPoint)]: {\n\t\t\t\torder: 1,\n\t\t\t\tminHeight: '400px'\n\t\t\t}\n\t\t}\n\t})\n);\n\nexport const App: React.FC = () => {\n\tconst classes = useStyles();\n\tconst dispatch = useDispatch();\n\n\tuseEffect(() => {\n\t\tdispatch(fetchEQData());\n\t}, [dispatch]);\n\n\tconst displayMode = useSelector(selectDisplayMode);\n\tconst isDark = displayMode === DisplayMode.DARK;\n\n\tconst theme = createMuiTheme({\n\t\tpalette: {\n\t\t\ttype: displayMode,\n\t\t\tprimary: {\n\t\t\t\tmain: isDark ? grey['800'] : blue['300']\n\t\t\t}\n\t\t}\n\t});\n\n\tconst sContainerBgColor = css`\n\t\tbackground-color: ${isDark ? 'rgb(30, 30, 30)' : 'white'};\n\t`;\n\n\treturn (\n\t\t<ThemeProvider theme={theme}>\n\t\t\t<div className={cx(sContainer, sContainerBgColor)}>\n\t\t\t\t<NavBar />\n\t\t\t\t<Grid container spacing={2} className={classes.containerGrid}>\n\t\t\t\t\t<Grid item className={classes.listItem}>\n\t\t\t\t\t\t<EQList />\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Grid item className={classes.mapItem}>\n\t\t\t\t\t\t<EQMap />\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</div>\n\t\t</ThemeProvider>\n\t);\n};\n\nconst sContainer = css`\n\tmin-height: 100vh;\n`;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { persistReducer, persistStore } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport thunk from 'redux-thunk';\nimport { Action, combineReducers, configureStore, ThunkAction } from '@reduxjs/toolkit';\nimport configReducer from './config/configSlice';\nimport eqReducer from './eq/eqSlice';\n\n// export const store = configureStore({\n// \treducer: {\n// \t\tconfig: configReducer,\n// \t\tearthquake: eqReducer\n// \t}\n// });\n\nconst reducers = combineReducers({\n\tconfig: configReducer,\n\tearthquake: eqReducer\n});\n\nconst persistConfig = {\n\tkey: 'root',\n\tversion: 1,\n\tstorage,\n\twhitelist: ['config']\n};\nconst persistedReducer = persistReducer(persistConfig, reducers);\n\nexport const store = configureStore({\n\treducer: persistedReducer,\n\tmiddleware: [thunk]\n});\n\nexport const persister = persistStore(store);\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n\tReturnType,\n\tRootState,\n\tunknown,\n\tAction<string>\n>;\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport { persister, store } from './state/store';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<PersistGate loading={null} persistor={persister}>\n\t\t\t\t<App />\n\t\t\t</PersistGate>\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}